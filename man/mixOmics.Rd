% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mixOmics.R
\name{mixOmics}
\alias{mixOmics}
\alias{mixOmics,MultiAssayExperiment-method}
\alias{mixOmics,SummarizedExperiment-method}
\alias{mixOmics,matrix-method}
\alias{mixOmics,list-method}
\title{PLS-derived methods: one function to rule them all!}
\usage{
mixOmics(X, ...)

\S4method{mixOmics}{MultiAssayExperiment}(X, experiments, assay.type, col.var, MINT = FALSE, ...)

\S4method{mixOmics}{SummarizedExperiment}(X, assay.type, col.var, ...)

\S4method{mixOmics}{matrix}(
  X,
  Y,
  indY,
  study,
  ncomp,
  keepX,
  keepY,
  design,
  tau = NULL,
  mode = c("regression", "canonical", "invariant", "classic"),
  scale,
  tol = 1e-06,
  max.iter = 100,
  near.zero.var = FALSE
)

\S4method{mixOmics}{list}(
  X,
  Y,
  indY,
  study,
  ncomp,
  keepX,
  keepY,
  design,
  tau = NULL,
  mode = c("regression", "canonical", "invariant", "classic"),
  scale,
  tol = 1e-06,
  max.iter = 100,
  near.zero.var = FALSE,
  ...
)
}
\arguments{
\item{X}{Input data. A matrix. a list of data sets (called
'blocks') matching on the same samples, SummarizedExperiment or
MultiAssayExperiment object. Data should be arranged in samples x
variables, with samples order matching in all data sets.}

\item{...}{Additional arguments.}

\item{experiments}{A character or integer vector specifying experiments from
\code{X} when it is MultiAssayExperiment.}

\item{assay.type}{A character vector specifying assays from \code{X} when it
is SummarizedExperiment or MultiAssayExperiment.}

\item{col.var}{Character vector specifying column variables from
\code{colData(X)} when \code{X} is SummarizedExperiment or
MultiAssayExperiment. The values are passed as \code{Y}.}

\item{MINT}{A single boolean value to specify whether to apply DIABLO or
MINT, when \code{X} is MultiAssayExperiment.}

\item{Y}{Outcome. Either a numeric matrix of responses or a factor or a
class vector for the discrete outcome.}

\item{indY}{To supply if Y is missing, indicates the position of the outcome
in the list X. Disabled when \code{X} is SummarizedExperiment or
MultiAssayExperiment.}

\item{study}{grouping factor indicating which samples are from the same
study. Disabled when \code{X} is SummarizedExperiment or
MultiAssayExperiment.}

\item{ncomp}{If \code{X} is a data matrix, \code{ncomp} is a single value.
If \code{X} is a list of data sets, \code{ncomp} is a numeric vector of
length the number of blocks in \code{X}. The number of components to include
in the model for each block (does not necessarily need to take the same
value for each block).}

\item{keepX}{Number of variables to keep in the \eqn{X}-loadings}

\item{keepY}{Number of variables to keep in the \eqn{Y}-loadings}

\item{design}{numeric matrix of size (number of blocks) x (number of blocks)
with only 0 or 1 values. A value of 1 (0) indicates a relationship (no
relationship) between the blocks to be modelled. If \code{Y} is provided
instead of \code{indY}, the \code{design} matrix is changed to include
relationships to \code{Y}.}

\item{tau}{numeric vector of length the number of blocks in \code{X}. Each
regularization parameter will be applied on each block and takes the value
between 0 (no regularisation) and 1. If tau = "optimal" the shrinkage
paramaters are estimated for each block and each dimension using the Schafer
and Strimmer (2005) analytical formula.}

\item{mode}{character string. What type of algorithm to use, (partially)
matching one of \code{"regression"}, \code{"canonical"}, \code{"invariant"}
or \code{"classic"}. See Details.}

\item{scale}{Logical. If scale = TRUE, each block is standardized to zero
means and unit variances (default: TRUE).}

\item{tol}{Convergence stopping value.}

\item{max.iter}{integer, the maximum number of iterations.}

\item{near.zero.var}{Logical, see the internal \code{\link{nearZeroVar}}
function (should be set to TRUE in particular for data with many zero
values). Setting this argument to FALSE (when appropriate) will speed up the
computations. Default value is FALSE}
}
\value{
none
}
\description{
\emph{This is the documentation for mixOmics function from mixOmics package.
For package documentation refer to \code{help(package='mixOmics')}}
}
\details{
This function performs one of the PLS derived methods included in the
mixOmics package that is the most appropriate for your input data, one of
(mint).(block).(s)pls(da) depending on your input data (single data, list of
data, discrete outcome, \dots{})

This function performs one of the PLS derived methods included in the
mixOmics package that is the most appropriate for your input data, one of
(mint).(block).(s)pls(da).

If your input data \code{X} is a matrix, then the algorithm is directed
towards one of (mint).(s)pls(da) depending on your input data \code{Y}
(factor for the discrete outcome directs the algorithm to DA analysis) and
whether you input a \code{study} parameter (MINT analysis) or a \code{keepX}
parameter (sparse analysis).

If your input data \code{X} is a list of matrices, then the algorithm is
directed towards one of (mint).block.(s)pls(da) depending on your input data
\code{Y} (factor for the discrete outcome directs the algorithm to DA
analysis) and whether you input a \code{study} parameter (MINT analysis) or
a \code{keepX} parameter (sparse analysis).

More details about the PLS modes in \code{?pls}.

\code{X} can also be SummarizedExperiment or MultiAssayExperiment object
which are the main data containers in Bioconductor.
SummarizedExperiment is designed for single omic data while
MultiAssayExperiment streamlines the handling of multi-table data. When
SummarizedExperiment object is provided single-table PLS methods are
applied. Either MINT or DIABLO is applied, when MultiAssayExperiment is
fed as an input.
}
\examples{
## -- directed towards PLS framework because X is a matrix and the study argument is missing
# ----------------------------------------------------
data(liver.toxicity)
X = liver.toxicity$gene
Y = liver.toxicity$clinic
Y.factor = as.factor(liver.toxicity$treatment[, 4])

# directed towards PLS
out = mixOmics(X, Y, ncomp = 2)

# directed towards sPLS because of keepX and/or keepY
out = mixOmics(X, Y, ncomp = 2, keepX = c(50, 50), keepY = c(10, 10))

# directed towards PLS-DA because Y is a factor
out = mixOmics(X, Y.factor, ncomp = 2)

# directed towards sPLS-DA because Y is a factor and there is a keepX
out = mixOmics(X, Y.factor, ncomp = 2, keepX = c(20, 20))


\dontrun{
## -- directed towards block.pls framework because X is a list
# ----------------------------------------------------
data(nutrimouse)
Y = unmap(nutrimouse$diet)
data = list(gene = nutrimouse$gene, lipid = nutrimouse$lipid, Y = Y)

# directed towards block PLS
out = mixOmics(X = data, Y = Y,ncomp = 3)

# directed towards block sPLS because of keepX and/or keepY
out = mixOmics(X = data, Y = Y,ncomp = 3,
keepX = list(gene = c(10,10), lipid = c(15,15)))

# directed towards block PLS-DA because Y is a factor
out = mixOmics(X = data, Y = nutrimouse$diet, ncomp = 3)

# directed towards block sPLS-DA because Y is a factor and there is a keepX
out = mixOmics(X = data, Y = nutrimouse$diet, ncomp = 3,
keepX = list(gene = c(10,10), lipid = c(15,15)))


## -- directed towards mint.pls framework because of the study factor
# ----------------------------------------------------
data(stemcells)
# directed towards PLS
out = mixOmics(X = stemcells$gene, Y = unmap(stemcells$celltype), ncomp = 2)

# directed towards mint.PLS
out = mixOmics(X = stemcells$gene, Y = unmap(stemcells$celltype),
ncomp = 2, study = stemcells$study)

# directed towards mint.sPLS because of keepX and/or keepY
out = mixOmics(X = stemcells$gene, Y = unmap(stemcells$celltype),
ncomp = 2, study = stemcells$study, keepX = c(10, 5, 15))

# directed towards mint.PLS-DA because Y is a factor
out = mixOmics(X = stemcells$gene, Y = stemcells$celltype, ncomp = 2,
study = stemcells$study)

# directed towards mint.sPLS-DA because Y is a factor and there is a keepX
out = mixOmics(X = stemcells$gene, Y = stemcells$celltype, ncomp = 2,
study = stemcells$study, keepX = c(10, 5, 15))

## -- Use SummarizedExperiment as an input
# ----------------------------------------------------

data(liver.toxicity)
X = liver.toxicity[["gene"]]
Y = liver.toxicity[["clinic"]]
Y.factor = as.factor(liver.toxicity[["treatment"]][, 4])

# Create SummarizedExperiment object
library(SummarizedExperiment)
assay <- t(X)
coldata <- DataFrame(Y)
coldata[["outcome"]] <- Y.factor
se <- SummarizedExperiment(
    assays = SimpleList(abundance = assay),
    colData = coldata
)

# directed towards PLS
columns <- colnames(colData(se))
columns <- columns[ !columns \%in\% c("outcome") ]
out = mixOmics(se, assay.type = "abundance", col.var = columns, ncomp = 2)

# directed towards sPLS because of keepX and/or keepY
out = mixOmics(
    se, assay.type = "abundance", col.var = columns,
    ncomp = 2, keepX = c(50, 50), keepY = c(10, 10))

# directed towards PLS-DA because Y is a factor
out = mixOmics(se, assay.type = "abundance", col.var = "outcome", ncomp = 2)

# directed towards sPLS-DA because Y is a factor and there is a keepX
out = mixOmics(
    se, assay.type = "abundance", col.var = "outcome",
    ncomp = 2, keepX = c(20, 20))

## -- Use MultiAssayExperiment as an input
# ----------------------------------------------------

# Create MultiAssayExperiment
data(nutrimouse)
Y = unmap(nutrimouse[["diet"]])
se1 <- SummarizedExperiment(
    assays = SimpleList(abundance = t(nutrimouse[["gene"]])))
se2 <- SummarizedExperiment(
    assays = SimpleList(abundance = t(nutrimouse[["lipid"]])))
coldata <- DataFrame(Y)
colnames(coldata) <- levels(Y)
coldata[["diet"]] <- nutrimouse[["diet"]]
rownames(coldata) <- colnames(se1)
mae <- MultiAssayExperiment(
    experiments = ExperimentList(gene = se1, lipid = se2),
    colData = coldata
)

## -- directed towards block.pls framework because X is a MultiAssayExperiment
# ----------------------------------------------------

# directed towards block PLS
columns <- colnames(colData(mae))
columns <- columns[ !columns \%in\% c("diet") ]
out = mixOmics(
    mae, experiments = c("gene", "lipid"),
    assay.type = c("abundance", "abundance"),
    col.var = columns, ncomp = 3)

# directed towards block sPLS because of keepX and/or keepY
out = mixOmics(
    mae, experiments = c("gene", "lipid"),
    assay.type = c("abundance", "abundance"),
    col.var = columns, ncomp = 3,
    keepX = list(gene = c(10,10), lipid = c(15,15))
)

# directed towards block PLS-DA because Y is a factor
out <- mixOmics(
    mae, experiments = c("gene", "lipid"),
    assay.type = c("abundance", "abundance"),
    col.var = "diet", ncomp = 3)

# directed towards block sPLS-DA because Y is a factor and there is a keepX
out <- mixOmics(
    mae, experiments = c("gene", "lipid"),
    assay.type = c("abundance", "abundance"),
    col.var = "diet", ncomp = 3,
    keepX = list(gene = c(10,10), lipid = c(15,15))
)

# Create MultiAssayExperiment
data(nutrimouse)
assay <- t(stemcells[["gene"]])
coldata <- DataFrame(unmap(stemcells[["celltype"]]))
colnames(coldata) <- levels(unmap(stemcells[["celltype"]]))
rownames(coldata) <- colnames(assay)
se <- SummarizedExperiment(
    assays = SimpleList(abundance = assay),
    colData = coldata
)
se[["celltype"]] <- stemcells[["celltype"]]
# Split into MultiAssayExperiment
if( !require("mia") ){
    BiocManager::install("mia")
}
se_list <- splitOn(se, by = "columns", f = stemcells[["study"]])
names(se_list) <- paste0("study_", names(se_list))
mae <- MultiAssayExperiment(experiments = se_list)

## -- directed towards mint.pls framework because of the specified MINT argument
# ----------------------------------------------------

# Get columns from the first experiment/study
columns <- colnames(colData(mae[[1]]))
columns <- columns[ !columns \%in\% c("celltype") ]

# directed towards PLS (note that we are using SummarizedExperiment)
out = mixOmics(se, assay.type = "abundance", col.var = columns, ncomp = 2)

# directed towards mint.PLS
out = mixOmics(
    mae, experiments = c("study_1", "study_3"),
    assay.type = c("abundance", "abundance"),
    col.var = columns, ncomp = 2, MINT = TRUE)

# directed towards mint.sPLS because of keepX and/or keepY
out = mixOmics(
    mae, experiments = c("study_1", "study_3"),
    assay.type = c("abundance", "abundance"),
    col.var = columns, ncomp = 3, MINT = TRUE,
    keepX = c(10, 5, 15)
)

# directed towards mint.PLS-DA because we specify class
out = mixOmics(
    mae, experiments = c("study_1", "study_3"),
    assay.type = c("abundance", "abundance"),
    col.var = "celltype", ncomp = 2, MINT = TRUE
)

# directed towards mint.sPLS-DA because Y is a factor and there is a keepX
out = mixOmics(
    mae, experiments = c("study_1", "study_3"),
    assay.type = c("abundance", "abundance"),
    col.var = "celltype", ncomp = 3, MINT = TRUE, keepX = c(10, 5, 15)
)

}
}
\references{
mixOmics article:

Rohart F, Gautier B, Singh A, Lê Cao K-A. mixOmics: an R package for 'omics
feature selection and multiple data integration. PLoS Comput Biol 13(11):
e1005752

MINT models:

Rohart F, Eslami A, Matigian, N, Bougeard S, Lê Cao K-A (2017). MINT: A
multivariate integrative approach to identify a reproducible biomarker
signature across multiple experiments and platforms. BMC Bioinformatics
18:128.

Eslami, A., Qannari, E. M., Kohler, A., and Bougeard, S. (2013). Multi-group
PLS Regression: Application to Epidemiology. In New Perspectives in Partial
Least Squares and Related Methods, pages 243-255. Springer.

Integration of omics data sets:

Singh A, Gautier B, Shannon C, Vacher M, Rohart F, Tebbutt S, Lê Cao K-A.
DIABLO: an integrative, multi-omics, multivariate method for multi-group
classification. \url{http://biorxiv.org/content/early/2016/08/03/067611}

Lê Cao, K.-A., Martin, P.G.P., Robert-Granie, C. and Besse, P. (2009).
Sparse canonical methods for biological data integration: application to a
cross-platform study. \emph{BMC Bioinformatics} \bold{10}:34.

Lê Cao, K.-A., Rossouw, D., Robert-Granie, C. and Besse, P. (2008). A sparse
PLS for variable selection when integrating Omics data. \emph{Statistical
Applications in Genetics and Molecular Biology} \bold{7}, article 35.

Tenenhaus A., Phillipe C., Guillemot V., Lê Cao K-A. , Grill J. , Frouin V.
(2014), Variable selection for generalized canonical correlation analysis,
\emph{Biostatistics}, doi: 10.1093/biostatistics. PMID: 24550197.

Sparse SVD:

Shen, H. and Huang, J. Z. (2008). Sparse principal component analysis via
regularized low rank matrix approximation. \emph{Journal of Multivariate
Analysis} \bold{99}, 1015-1034.

PLS-DA:

Lê Cao K-A, Boitard S and Besse P (2011). Sparse PLS Discriminant Analysis:
biologically relevant feature selection and graphical displays for
multiclass problems. BMC Bioinformatics 12:253.

PLS:

Tenenhaus, M. (1998). \emph{La regression PLS: theorie et pratique}. Paris:
Editions Technic.

Wold H. (1966). Estimation of principal components and related models by
iterative least squares. In: Krishnaiah, P. R. (editors), \emph{Multivariate
Analysis}. Academic Press, N.Y., 391-420.

Abdi H (2010). Partial least squares regression and projection on latent
structure regression (PLS Regression). \emph{Wiley Interdisciplinary
Reviews: Computational Statistics}, 2(1), 97-106.

On multilevel analysis:

Liquet, B., Lê Cao, K.-A., Hocini, H. and Thiebaut, R. (2012) A novel
approach for biomarker selection and the integration of repeated measures
experiments from two platforms. \emph{BMC Bioinformatics} \bold{13}:325.

Westerhuis, J. A., van Velzen, E. J., Hoefsloot, H. C., and Smilde, A. K.
(2010). Multivariate paired data analysis: multilevel PLSDA versus OPLSDA.
\emph{Metabolomics}, \bold{6}(1), 119-128.

Visualisations:

González I., Lê Cao K.-A., Davis, M.D. and Déjean S. (2013) Insightful
graphical outputs to explore relationships between two omics data sets.
BioData Mining 5:19.
}
\seealso{
\code{\link{pls}}, \code{\link{spls}}, \code{\link{plsda}},
\code{\link{splsda}}, \code{\link{mint.pls}}, \code{\link{mint.spls}},
\code{\link{mint.plsda}}, \code{\link{mint.splsda}},
\code{\link{block.pls}}, \code{\link{block.spls}},
\code{\link{block.plsda}}, \code{\link{block.splsda}},
\code{\link{mint.block.pls}}, \code{\link{mint.block.spls}},
\code{\link{mint.block.plsda}}, \code{\link{mint.block.splsda}}
}
\author{
Florian Rohart, Kim-Anh Lê Cao, Al J Abadi
}
\keyword{dplot}
\keyword{hplot}
\keyword{multivariate}
